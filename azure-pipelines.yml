# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
  name: default
  
variables:
  buildConfiguration: 'Release'

# Steps to run in the pipeline
steps:

# - script: dotnet pack -p Version=1.0.$(Build.BuildId)
#   displayName: 'Create NuGet Package'

# - script: dotnet nuget push --source "hello-world-feed" --api-key az $(System.DefaultWorkingDirectory)/bin/Release/dotnew-SonarQube.1.0.$(Build.BuildId).nupkg
#   displayName: 'publish NuGet Package'

  
- task: DotNetCoreCLI@2
  displayName: 'Build and Push NuGet Package'
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration) --versioningScheme 1.0.$(Build.BuildId)'
    # Assuming the NuGet package name is "dotnew-SonarQube" (update if different)
    packagesToPack: '**/dotnew-SonarQube.csproj'  # Update project path if needed
  outputs: # Capture the output path of the NuGet package
    packageLocation: '$(build.artifactStagingDirectory)'

- script: |  # Use inline script for pushing with secure variable
  displayName: 'Push NuGet Package (using secure variable)'
  inputs:
    targetType: 'inline'
    script: |
      nugetSource="hello-world-feed"  # Define NuGet feed source
      apiKey=$(NugetApiKey)  # Access secure variable for API key
      packagePath=$(build.artifactStagingDirectory)/*.nupkg  # Use wildcard

      # Push the NuGet package to the feed using captured output path and secure variable
      dotnet nuget push --source "$nugetSource" --api-key "$apiKey" "$packagePath"

